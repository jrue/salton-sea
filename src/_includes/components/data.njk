<script>
(() => {
  "use strict";

  const App = {
    state: {
      allData: [],              //csv imported using d3
      priorityIndex: null,      //d3.rollup of specific columns used as aggregate function
      uniquePriorities: [],     //to create top-level pill buttons, these are unique top-level priorities in dataset
      priorityShortcodes: [],   //since dataset has longer phrases for top-level buttons, this uses shorter names
      priorityDescriptions: [], //longer description to display after user clicks top-level button
      currentAlignment: "",     //current top-level alignment
      currentPriority: "",      //keep track of which priority we're viewing to filter datatable when user clicks a city
      dt: null,                  //datatable reference
      wait: false               // wait for scroll animation to complete
    },
    els: {
      pillLabels:    "#pill-labels",
      categoryInfo:  "#category-info",
      mapRoot:       "#salton_sea_map",
      ratioHud:      "#alignment-value-ratio",
      dataTable:     "#policy-table",
      dataHeader:    "#data-table-header",
      strategyMapText: "#strategy-map-text",
      infoButton:    '<i id="reset-info" class="bi bi-skip-backward position-absolute top-0 end-0 z-1 fs-4" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Reset view."></i>'
    },
    colors: {
      airQuality: "#5192E2",
      greenSpaces: "#469065",
      agriculture: "#F88C8C",
      infrastructure: "#FFD89D",
      priorityDefault: "#526977",  //--priority-default-color
      mapCircleColor: "#142a3f",
      mapSelectedColor: "#142a3f",
      pillActiveTextColor: "#000000",
      heroText: "#516A88",
      lightBackground: "#CFDFEB",
      darkBlueBackground: "#5E7B9A"
    }
  };

  //set the CSS variable to the default color
  $(":root").css("--priority-default-color", App.colors.priorityDefault);
  $(":root").css("--pill-active-text-color", App.colors.pillActiveTextColor);
  $(":root").css("--hero-text", App.colors.heroText);
  $(":root").css("--light-background", App.colors.lightBackground);
  $(":root").css("--dark-background", App.colors.darkBlueBackground);
  $(":root").css("--alignment-infrastructure-bg-color", App.colors.infrastructure);
  $(":root").css("--alignment-agriculture-bg-color", App.colors.agriculture);
  $(":root").css("--alignment-green-spaces-bg-color", App.colors.greenSpaces);
  $(":root").css("--alignment-air-quality-bg-color", App.colors.airQuality);

  // -----------------------------
  // Utilities
  // -----------------------------
  
  // turn "Salton Sea" into "salton-sea"
  const slugify = (s) => String(s).trim().toLowerCase().split(/\s+/).join("-"); //use jurisdictions as class names sometimes,
  
  // turn "Salton Sea" into "saltonSea"
  const camelfy = s => String(s).trim().toLowerCase().split(/\s+/).map((w, i) => i === 0 ? w : w[0].toUpperCase() + w.slice(1)).join("");
  
  // turn ["Salton Sea", "Coachella", "Brawley"] to "salton-sea coachella brawley"
  const classListFromStrings = (arr) => arr.map(j => slugify(j)).join(" ");
  
  // turn " Salton Sea " to "salton sea"
  const norm = s => String(s).trim().toLowerCase(); //normalizer

  //turn arr to comma-separated string with "and." Example: ["Salton Sea", "Coachella", "Brawley"] to "Salton Sea, Coachella, and Brawley"
  const joinWithAnd = (arr = []) =>
    !Array.isArray(arr) ? "" :
    arr.length === 0 ? "" :
    arr.length === 1 ? String(arr[0]) :
    arr.length === 2 ? `${arr[0]} and ${arr[1]}` :
    `${arr.slice(0, -1).join(", ")}, and ${arr.at(-1)}`;

  //hex to RGB so to detect whether text will show on light backgrounds
  const hexToRgb = hex => {
    let h = String(hex).replace('#', '').trim();
    if (h.length === 3) h = h.split('').map(ch => ch + ch).join('');
    const num = parseInt(h, 16);
    return { r: (num >> 16) & 255, g: (num >> 8) & 255, b: num & 255 };
  };

  // Returns '#000000' or '#ffffff' for best contrast with a hex background.
  // Accepts 3- or 6-digit hex, with or without '#'.
  // example pickHighContrastTextColor('#ffffff'); returns "#000000"
  const pickHighContrastTextColor = (hex, light = '#ffffff', dark = '#000000') => {
    const { r, g, b } = hexToRgb(hex);
    const toLin = c => {
      c /= 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    };
    const L = 0.2126 * toLin(r) + 0.7152 * toLin(g) + 0.0722 * toLin(b);
    const contrastWhite = 1.05 / (L + 0.05);
    const contrastBlack = (L + 0.05) / 0.05;
    return contrastWhite > contrastBlack ? light : dark;
  };


  const firstOfSet = (setLike) =>
    setLike && typeof setLike.values === "function"
      ? setLike.values().next().value
      : null;

  const toTitleCase = (str) => {
    const small = /^(a|an|and|as|at|but|by|for|in|nor|of|on|or|per|the|to|vs?|via)$/i;
    return String(str).split(/\s+/).map((w, i, all) => {
      if (small.test(w) && i !== 0 && i !== all.length - 1) return w.toLowerCase();
      return w.charAt(0).toUpperCase() + w.slice(1).toLowerCase();
    }).join(" ");
  };


  /**
   * Smoothly scroll the PARENT page so that the target element in the CHILD
   * lines up nicely below a sticky header that shrinks from 160 -> 131.75.
   *
   * Usage (from inside the child):
   *   scrollParentToId('datatable');                 // defaults
   *   scrollParentToId('section-2', { extraOffset: 8 });  // tweak if needed
   */
  function scrollParentToId(
    id,
    {
      headerLarge = 160,
      headerSmall = 131.75,
      shrinkAt = 1,        // when parent scrollTop > this, use headerSmall
      extraOffset = 0,     // additional pixels to subtract if you want a gap
      fallbackIframeTop = 192 // your observed constant, used only if pageInfo missing
    } = {}
  ) {
    if (!window.parentIFrame) return; // iFrameResizer not ready yet

    const el = document.getElementById(id);
    if (!el) return;

    // Ask the parent for current scroll + where this iframe sits in the parent
    // Then compute an absolute Y in the parent coordinate space and scroll to it.
    try {
      window.parentIFrame.getPageInfo(function(info) {
        // info.scrollTop: parent scroll position
        // info.iframeTop: distance from parent's document top to top of iframe
        const iframeTop = (info && typeof info.iframeTop === 'number')
          ? info.iframeTop
          : fallbackIframeTop;

        const parentScrollTop = (info && typeof info.scrollTop === 'number')
          ? info.scrollTop
          : 0;

        // Where is the element relative to the iframe's viewport?
        const rect = el.getBoundingClientRect();

        // Choose header size based on parent's current scrollTop
        const header = parentScrollTop > shrinkAt ? headerSmall : headerLarge;

        // Compute target absolute Y in the parent doc:
        // parentScrollTop + iframeTop + elementTopInIframe - header - extraOffset
        const targetY = Math.max(
          0,
          Math.round(parentScrollTop + iframeTop + rect.top - header - extraOffset)
        );

        // Smooth scroll the PARENT
        window.parentIFrame.sendMessage({
          action: "scrollToY",
          y: targetY
        });
      });
    } catch (e) {
      // If getPageInfo isn't available (older versions), fall back to a
      // best-effort relative move using the known iframe offset.
      const rect = el.getBoundingClientRect();
      const header = headerSmall; // assume "scrolled" state as a safer default
      const targetY = Math.max(0, Math.round(fallbackIframeTop + rect.top - header - extraOffset));
      window.parentIFrame.sendMessage({
        action: "scrollToY",
        y: targetY
      });
    }
  }


  // Build the big index once
  const buildPriorityIndex = (rows) => d3.rollup(
    rows,
    groupRows => ({
      jurisdictions:       new Set(groupRows.map(d => d["Jurisdiction"])),
      fullAlignment:       new Set(groupRows.map(d => d["Priority Alignment"])),
      alignmentDescription:new Set(groupRows.map(d => d["Priority Alignment Description"])),
      sharedPriorities:    new Set(groupRows.map(d => d["Shared Priorities"])),
      byShared: d3.rollup(
        groupRows,
        vv => {
          const jur   = new Set(vv.map(d => d["Jurisdiction"]).filter(Boolean));
          const terms = new Set(vv.map(d => d["General Terms of Commonalities (Specific)"]).filter(Boolean));
          const countsByJur = d3.rollup(
            vv,
            vvv => vvv.length, // change to unique policy count if desired
            d => d["Jurisdiction"]
          );
          return { jurisdictions: jur, generalTerms: terms, jurisdictionCount: jur.size, countsByJur };
        },
        d => d["Shared Priorities"]
      )
    }),
    d => d["Priority Alignment Shortcode"]
  );

  /**
   * Build once: strategy token â†’ array of source rows
   * Returns a function(strategy, [filter]) -> unique jurisdictions[]
   *
   * filter is an optional object like:
   *   { "Priority Alignment Shortcode": "Green Spaces" }
   *   { "Jurisdiction": ["Brawley","Coachella"] }
   *   { "Priority Alignment": /Green/i }
   *   { "Priority Alignment": v => v && v.startsWith("Green") }
   */
  const buildJurisdictionsFromStrategy = (rows) => {
    const byStrategy = new Map(); // normalized strategy -> rows[]

    for (const r of rows) {
      const list = r?.["Strategy List"];
      if (!list) continue;
      for (const t of list.split(",").map(s => norm(s)).filter(Boolean)) {
        if (!byStrategy.has(t)) byStrategy.set(t, []);
        byStrategy.get(t).push(r);
      }
    }

    // flexible matcher for filter values
    const matches = (cell, rule) => {
      if (rule == null) return true;
      if (typeof rule === 'function') return !!rule(cell);
      if (rule instanceof RegExp) return rule.test(String(cell ?? ''));
      if (Array.isArray(rule))   return rule.includes(cell);
      return cell === rule; // strict equality by default
    };

    // The callable
    const getJurisdictionsFromStrategy = (strategy, filter = null) => {
      if (!strategy) return [];
      const rowsForStrategy = byStrategy.get(norm(strategy)) || [];
      let filtered = rowsForStrategy;

      if (filter && typeof filter === 'object') {
        filtered = rowsForStrategy.filter(row =>
          Object.entries(filter).every(([col, rule]) => matches(row?.[col], rule))
        );
      }

      // unique jurisdictions, sorted
      const set = new Set(filtered.map(r => r?.["Jurisdiction"]).filter(Boolean));
      return Array.from(set).sort(d3.ascending);
    };

    // Optional helpers
    getJurisdictionsFromStrategy.keys = () => Array.from(byStrategy.keys()).sort();
    getJurisdictionsFromStrategy.size = byStrategy.size;

    return getJurisdictionsFromStrategy;
  };


  // -----------------------------
  // UI: Top pill buttons
  // -----------------------------
  function updatePills(labels, labelDescriptions) {
    const $root = $(App.els.pillLabels).empty();

    for (let i = 0; i < labels.length; i++) {
      const label = labels[i];
      const desc  = labelDescriptions?.[i] || "";
      const slug  = slugify(label);

      const $col = $('<div class="col-6 col-md-6 col-lg-3 d-grid"></div>');
      
      //customize the individual svg icons by editing the .svg files in the images folder. Keep names based on slugs.
      $col.append(`
        <div class="pill-labels mb-3 d-block position-relative"
          style="background-image:url('{{ '/assets/images/' | url }}${slug}.svg');">
        </div>
      `);
      $col.append(`
        <button
          class="alignment-buttons ${slug} pills btn badge lh-sm rounded-3 font-small text-bg-light fw-normal text-center py-2 d-block text-uppercase"
          data-description="${desc}"
          data-eq="eq-${i}">
          ${label}
        </button>
      `);

      $root.append($col);
    }
  }

  // -----------------------------
  // UI: Render detail for a shortcode click
  // -----------------------------
  function renderPriorityDetail(shortcode) {
    const node = App.state.priorityIndex.get(shortcode);
    if (!node) return;

    const title = firstOfSet(node.fullAlignment) || "";
    const para  = firstOfSet(node.alignmentDescription) || "";

    const sharedPriorities = Array.from(node.sharedPriorities || []);
    const $info = $(App.els.categoryInfo).empty(); //remove instructions

    $info.append(App.els.infoButton); //add info icon

    $info.append(`<h2>${title}</h2><p>${para}</p>`);

    // For each shared priority, render its button & collapse with jurisdictions
    for (const sp of sharedPriorities) {
      const entry = node.byShared.get(sp);
      if (!entry) continue;

      const jurisdictions = Array.from(entry.jurisdictions).sort();
      const jurClassList = classListFromStrings(jurisdictions);
      const generalTerm  = firstOfSet(entry.generalTerms) || "";
      const spId = slugify(sp);

      // Trigger button
      $info.append(`
        <button
          class="priorities pills btn rounded-3 text-bg-light font-smaller fw-normal text-start mb-2 d-block"
          data-jurisdictions="${jurClassList}"
          data-bs-title="${generalTerm}"
          data-bs-toggle="collapse"
          data-bs-target="#${spId}">
          ${sp}
          <span class="badge rounded-pill text-bg-secondary">${entry.jurisdictionCount}/7</span>
        </button>
      `);

      // Collapse panel + jurisdiction buttons
      const $box = $(`<div id="${spId}" class="terms collapse ms-4"
                        data-jurisdictions="${jurClassList}"
                        data-priority="${sp}">
                        <p class="font-smaller mb-2">
                          ${generalTerm}. Click on a jurisdiction below to see related policies that align with this category.
                        </p>
                      </div>`);

      for (const jur of jurisdictions) {
        const count = entry.countsByJur.get(jur) || 0;
        $box.append(`
          <button
            class="jurisdiction pills btn lh-sm rounded-3 text-bg-light font-smaller fw-normal text-start py-1 mb-2 d-block"
            data-jurisdiction="${slugify(jur)}"
            data-jurisdiction-raw="${jur}">
            ${jur}
            <span class="badge rounded-pill text-bg-secondary">${count} ${count == 1 ? 'policy' : 'policies'}</span>
          </button>
        `);
      }
      $info.append($box);
    }
  }

  // -----------------------------
  // Table: DataTables setup & refresh
  // -----------------------------
  function initDataTable() {
    App.state.dt = $(App.els.dataTable).DataTable({
      pagingType: "simple_numbers",
      renderer: "bootstrap",
      lengthChange: false,
      paging: true,
      searching: true,
      info: true,
      autoWidth: false,
      responsive: true,
      dom: `t
          <"row mt-3 justify-content-center"
            <"col-12 col-lg-4 dt-pager"p>
            <"col-12 col-lg-4 dt-button text-center"B>
            <"col-6  col-lg-4 dt-search"f>
          >
          <"row mt-2"
            <"col-12 dt-info text-center"i>
          >
        `,
      buttons: [
        {
          text: 'Show Policies for All Communities',
          className: 'btn btn-outline btn-sm bg-transparent text-wrap font-smaller',
          action: function () {
            renderPolicyTable(); // show all rows
          }
        }
      ],
      language: {
        paginate: {
          previous: '<i class="bi bi-chevron-left"></i>',
          next: '<i class="bi bi-chevron-right"></i>'
        }
      },
      columns: [
        { data: "Jurisdiction", defaultContent: "" },
        { data: "Policy Identifier", defaultContent: "" },
        { data: "Policy Category", defaultContent: "" },
        { data: "Policy Description", defaultContent: "", className: "text-wrap" },
        {
          data: "Strategy List",
          defaultContent: "",
          render: (data) => {
            if (!data) return "";
            return String(data)
              .split(",")
              .map(function(item){ 
                
                const jurisdictionsForThisBadge = App.state.currentPriority ? App.state.getJurisdictionsFromStrategy(item.trim(), {"Shared Priorities": App.state.currentPriority}) : App.state.getJurisdictionsFromStrategy(item.trim());
                const haveOrHas = jurisdictionsForThisBadge.length > 1 ? 'have' : 'has';
                const numOfJurisdictionsForThisBadge = `${String(jurisdictionsForThisBadge.length)}/7 communities`;

                if(jurisdictionsForThisBadge.length === 0){
                  return `<span class="badge strategy-badge text-wrap text-bg-secondary me-1 mb-1 lh-sm text-start">${toTitleCase(item.trim())}</span>`;
                } else {
                
                  return `<span class="badge strategy-badge strategy-badge-clickable text-wrap text-bg-secondary me-1 mb-1 lh-sm text-start" 
                            data-bs-toggle="tooltip"
                            data-bs-title="${joinWithAnd(jurisdictionsForThisBadge)} ${haveOrHas} this strategy.<br/><br/> ${numOfJurisdictionsForThisBadge}"
                            data-strategy-jurisdictions="${jurisdictionsForThisBadge.join(", ")}">
                            ${toTitleCase(item.trim())}
                          </span>`;
                }
              })
              .join(" ");
          }
        }
      ],
      columnDefs: [
        { targets: 0, responsivePriority: 3 },
        { targets: 1, responsivePriority: 1 },
        { targets: 2, responsivePriority: 3 },
        { targets: 3, responsivePriority: 1 },
        { targets: 4, responsivePriority: 1 }
      ]
    });
  } 

  /**
   * Show Data table
   * 
   * @param {string} jurisdictionRaw - (Optional) The name of the jurisdiction (i.e. calipatria)
   * @param {string} sharedPriority - (Optional) The name of the shared priority
   */
  function renderPolicyTable(jurisdictionRaw = null, sharedPriority = null) {

    const rows = App.state.allData.filter(d => {
      let match = true;

      if (jurisdictionRaw !== null && jurisdictionRaw !== "") {
        match = match && d["Jurisdiction"] === jurisdictionRaw;
      }

      if (sharedPriority !== null && sharedPriority !== "") {
        match = match && d["Shared Priorities"] === sharedPriority;
      }

      return match;
    });
    // header text
    const hdr = jurisdictionRaw && sharedPriority
      ? `Showing ${App.state.currentAlignment} policies for <span style="background-color:${App.colors.mapCircleColor};color:${pickHighContrastTextColor(App.colors.mapCircleColor)}">&nbsp;${jurisdictionRaw}&nbsp;</span> related to <span style="background-color:${App.colors.mapCircleColor};color:${pickHighContrastTextColor(App.colors.mapCircleColor)}">&nbsp;${sharedPriority}&nbsp;</span>`
      : jurisdictionRaw
        ? `Showing policies for ${jurisdictionRaw}`
        : sharedPriority
          ? `Showing policies related to ${sharedPriority}`
          : `Showing all policies`;

    $(App.els.dataHeader).html(hdr);

    App.state.dt.clear().rows.add(rows).draw();
  }

  // -----------------------------
  // Event wiring 
  // -----------------------------
  function wireEvents($) {

    //trigger click when clicking on icons as well
    $(document).on("click", ".pill-labels", function(){
      $(this).siblings(".alignment-buttons").trigger("click");
    })

    // Top-level category clicks 
    $(document).on("click", ".alignment-buttons", function () {
      const shortcode = $(this).text().trim(); // button text is the shortcode, e.g. "green spaces" or "air quality"
      App.state.currentAlignment = shortcode;   //save shortcode in currentAlignment
      App.state.currentPriority = "";           // reset until a terms panel opens
      renderPriorityDetail(shortcode);          // shows the categories 
      const pillBackgroundForThisPriority = App.colors[camelfy($(this).text())];
      App.colors.mapCircleColor = pillBackgroundForThisPriority;
      $(":root").css("--priority-active-color", pillBackgroundForThisPriority);
      $(":root").css("--priority-default-color", pillBackgroundForThisPriority);
      $(":root").css("--pill-active-text-color", pickHighContrastTextColor(pillBackgroundForThisPriority));
      $(".alignment-buttons").removeClass("active");
      $(`${App.els.strategyMapText} tspan`).empty();
      $(this).addClass("active");
      $(`${App.els.mapRoot} .map-background-element`).removeClass("is-drawn");
      $(App.els.ratioHud).removeClass("active");
    });

    //reset everything
    $(document).on("click", "#reset-info", function(){

      const tooltip = bootstrap.Tooltip.getInstance('#reset-info')
      tooltip.hide()


      $(App.els.categoryInfo).empty();
      $(App.els.dataHeader).empty();

      App.state.currentPriority = "";

      App.colors.mapCircleColor = App.colors.priorityDefault
      $(":root").css("--priority-active-color", App.colors.priorityDefault);
      $(":root").css("--priority-default-color", App.colors.priorityDefault);

      const img = $("<img />");
      img.attr("src", "assets/images/arrow.png");
      img.attr("alt", "arrow showing where to click");
      img.attr("width", "200");
      img.attr("height", "auto");
      img.css({marginLeft:"50%", marginTop:"-50px"});

      const h2 = $("<h2 />");
      h2.text("Instructions:");

      const p = $("<p />");
      p.text("Start by clicking on one of the alignments above. Then drill down further into some of the policy priorities to understand which communities have policies that promote those themes.")

      $(App.els.categoryInfo).append(img);
      $(App.els.categoryInfo).append(h2);
      $(App.els.categoryInfo).append(p);

      //remove classes to reset everything
      $(`${App.els.categoryInfo} .jurisdiction`).removeClass("active");
      $(`${App.els.mapRoot} .map-background-element`).removeClass("is-drawn");
      $(`${App.els.strategyMapText} tspan`).empty();
      $(App.els.ratioHud).removeClass("active"); 
      $(".priorities").removeClass("active");
      $(".jurisdiction").removeClass("active");
      $(".alignment-buttons").removeClass("active");

    });


    // Make sure only one collapse is open at a time; update HUD + map fills
    // When the button is clicked, this delegates the event to .terms, which is the div box
    // that actually opens, not the button itself. This event is bootstrap collapse component 
    // sending a trigger event any time a button with data-bs-toggle="collapse" is clicked.
    $(App.els.categoryInfo).on("show.bs.collapse", ".terms", function (e) {
      
      $(App.els.categoryInfo).find(".collapse.show").not(e.target).collapse("hide");                 //trigger collapse to other categories that might be open
      $(`${App.els.categoryInfo} .jurisdiction`).removeClass("active");                              //remove active class from any previous jurisdictions
      $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);       //keep all circles visible
      $(`${App.els.strategyMapText} tspan`).empty();

      const id = this.id;                                                         //get the id attribute from this box
      const $btn = $(`[data-bs-toggle="collapse"][data-bs-target="#${id}"]`);     //target the button that actuall initiated this open
      $(".priorities").removeClass("active");                                     //remove previous active classes
      $btn.addClass("active");

      const $panel = $(this);
      const priority = $panel.data("priority");
      const jurClasses = String($panel.data("jurisdictions") || "");
      App.state.currentPriority = priority;

      for (const cls of jurClasses.split(" ").filter(Boolean)) {
        $(`${App.els.mapRoot} #${cls}-background`).addClass("is-drawn");
      }

      $(App.els.ratioHud).addClass("active");                                                             //make the map ratio active
      $(`${App.els.ratioHud} .ratio-figure`).text(`${jurClasses.split(" ").filter(Boolean).length}/7`);   //show the correct figure
      $(`${App.els.ratioHud} #priority-word`).text("priority");
    });


    //when a category collapses
    $(App.els.categoryInfo).on("hide.bs.collapse", ".terms", function () {
      $(`${App.els.mapRoot} .map-background-element`).removeClass("is-drawn");
      $(`${App.els.strategyMapText} tspan`).empty();
      $(App.els.ratioHud).removeClass("active"); 
      $(".priorities").removeClass("active");
      $(".jurisdiction").removeClass("active");
    });



    // Jurisdiction click â†’ table + map highlight
    $(App.els.categoryInfo).on("click", ".jurisdiction", function () {
      
      $(`${App.els.strategyMapText} tspan`).empty();
      $(`${App.els.categoryInfo} .jurisdiction`).removeClass("active");
      $(App.els.categoryInfo).removeClass("active");
      $(this).addClass("active");

      const slug = $(this).data("jurisdiction");
      $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);
      $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapSelectedColor);

      App.state.wait = true; //wait for animation to complete

      renderPolicyTable($(this).data("jurisdiction-raw"), App.state.currentPriority);

      //scroll page to datatable
      //$("html, body").stop().animate({scrollTop: $("#datatable").offset().top}, 300);
      scrollParentToId("datatable");
      const timer = window.setTimeout(function(){ App.state.wait = false;}, 600);
    });


    $(App.els.categoryInfo).on("pointerover", ".jurisdiction", function () {
      const slug = $(this).data("jurisdiction");
      if(App.state.wait === false){
        $(`${App.els.categoryInfo} .jurisdiction`).removeClass("active");
        $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);
        $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapSelectedColor);
      }
    });

    $(App.els.categoryInfo).on("pointerout", ".jurisdiction", function () {
      const slug = $(this).data("jurisdiction");
      if(App.state.wait === false){
        $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapCircleColor);
      }
    });

    $('svg circle, #riverside-county-background, #imperial-county-background').on("pointerover", function(){
      const slug = $(this).attr("id").replace("-background", "");
      if(App.state.wait === false){
        $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);
        $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapSelectedColor);
      }
      $(`.jurisdiction[data-jurisdiction="${slug}"]`).addClass('expanded');
    });

    $('svg circle, #riverside-county-background, #imperial-county-background').on("pointerout", function(){
      const slug = $(this).attr("id").replace("-background", "");
      $(".jurisdiction").removeClass("expanded");
      
      if(App.state.wait === false){
        $(".map-background-element").css("fill", App.colors.mapCircleColor);
      }

    });

    $('svg circle, #riverside-county-background, #imperial-county-background').on("click", function(){

      const slug = $(this).attr("id").replace("-background", "");
      $(`${App.els.strategyMapText} tspan`).empty();
      $(`.jurisdiction`).removeClass("active");
      $(`.jurisdiction[data-jurisdiction="${slug}"]`).addClass('active');
      $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);
      $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapSelectedColor);

      App.state.wait = true; 

      if(App.state.currentPriority == ""){
        renderPolicyTable(slug.replace(/-/g, " ").replace(/\b\w/g, c => c.toUpperCase()))
      } else {
        console.log(App.state.currentPriority);
        renderPolicyTable($(`.jurisdiction[data-jurisdiction="${slug}"]`).data("jurisdiction-raw"), App.state.currentPriority);
      }

      //scroll page to datatable
      //$("html, body").stop().animate({scrollTop: $("#datatable").offset().top}, 300);
      scrollParentToId("datatable");
      const timer = window.setTimeout(function(){ App.state.wait = false;}, 600);
    });


    $("#datatable").on("click", ".strategy-badge", function(){
      
      const jurClasses = $(this).data("strategy-jurisdictions");

      $(`${App.els.ratioHud} .ratio-figure`).text(`${jurClasses.split(", ").filter(Boolean).length}/7`);
      $(`${App.els.ratioHud} #priority-word`).text("strategy");

      //split strategy text into chunks of 70 characters
      const strategyText = `The following regions that have policies that include the strategy, "${$(this).text().trim()}."`;
      const strategyTextArr = strategyText.split(" ").reduce((a,w) =>
        (a[a.length-1].length + w.length + 1 <= 70
          ? a[a.length-1] += (a[a.length-1] ? " " : "") + w
          : a.push(w), a), [""]);

      $(`${App.els.strategyMapText} tspan`).each((i, el) => $(el).text(strategyTextArr[i] || ""));

      $(`${App.els.categoryInfo} .jurisdiction`).removeClass("active");
      $(`${App.els.mapRoot} .map-background-element`).removeClass("is-drawn");
      $(App.els.categoryInfo).removeClass("active");
      $(App.els.ratioHud).addClass("active"); 
      $(".priorities").removeClass("active");
      $(".jurisdiction").removeClass("active");

      const slug = $(this).data("jurisdiction");
      $(`${App.els.mapRoot} .map-background-element`).css("fill", App.colors.mapCircleColor);
      $(`${App.els.mapRoot} #${slug}-background`).css("fill", App.colors.mapSelectedColor);

      for (const cls of jurClasses.split(", ").filter(Boolean)) {
        $(`${App.els.mapRoot} #${slugify(cls)}-background`).addClass("is-drawn");
      }

      App.state.wait = true; //wait for animation to complete

      //scroll page to datatable
      //$("html, body").stop().animate({scrollTop: $("#dashboard").offset().top - 140}, 300);
      scrollParentToId("dashboard");
      const timer = window.setTimeout(function(){ App.state.wait = false;}, 600);

    })


  }

  // -----------------------------
  // Video caption button
  // -----------------------------
  const $video = $("video");
  const video = $video.get(0);   // raw DOM element
  const tracks = video.textTracks;   // TextTrackList

  //Changing current language on video. The <video> tag has a current-language attribute
  //Each button has a data-language attribute for the language to switch
  $(".language-drop-down button.dropdown-item").on("click", function () {

    const languageSources = {
      "english" : "{{ '/assets/images/salton-sea-opener-english.mp4' | url }}",
      "spanish" : "{{ '/assets/images/salton-sea-opener-spanish.mp4' | url }}"
    }
    const currentLang = $video.data("current-language"); //get current 
    const newLang = $(this).data("language");
    const wasPlaying = !video.paused && !video.ended;
    const t = video.currentTime;

    // If already on this source, do nothing
    if (currentLang === newLang) return;

    const source = $video.find("source").get(0);
    if (source) {
      source.src = languageSources[`${newLang}`]; //change the src with the other language
      video.load();
    } else {
      video.src = languageSources[`${newLang}`];
    }

    //change current language for next time
    $video.attr("data-current-language", newLang);
    $video.data("current-language", newLang);

    

    //change active button
    $(".language-drop-down button.dropdown-item").removeClass("active");
    $(this).addClass("active");

    // When metadata is ready, restore time and play state
    const onLoaded = () => {
      // Clamp time within duration in case lengths differ a bit
      const seekTo = Math.min(t, Math.max(0, (video.duration || t)));
      try { video.currentTime = seekTo; } catch (e) {}
      if (wasPlaying) video.play().catch(() => {/* ignore autoplay block */});
      video.removeEventListener("loadedmetadata", onLoaded);
    };
    video.addEventListener("loadedmetadata", onLoaded);



  });


  // Handle clicks on dropdown items
  $(".caption-drop-down .dropdown-item").on("click", function () {
    const lang = $(this).text().trim(); // "English" or "EspaÃ±ol"

    //caption already showing, remove it.
    if($(this).hasClass("active")){

      $(this).removeClass("active");

      $.each(tracks, function (i, track) {
        track.mode = "hidden";
      });

      return;
    }

    $(".caption-drop-down .dropdown-item").removeClass("active");
    $(this).addClass("active").attr("aria-current", true);

    // Hide all first
    $.each(tracks, function (i, track) {
      track.mode = "hidden";
    });

    // Show the chosen one
    $.each(tracks, function (i, track) {
      if (track.label === lang) {
        track.mode = "showing";
        return false; // break
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    new bootstrap.Tooltip(document.body, {
      selector: '[data-bs-toggle="tooltip"]',
      html: true
    });
  });

  // -----------------------------
  // Bootstrap the app
  // -----------------------------
  $(function () {
    // DataTable first so it exists before we render into it
    initDataTable();

    d3.csv("{{ 'assets/data/data.csv' | url }}")
      .then((data) => {
        App.state.allData = data;
        App.state.priorityIndex = buildPriorityIndex(data);

        // These are still available if you need them elsewhere
        App.state.uniquePriorities     = Array.from(d3.union(data.map(d => d["Priority Alignment"])));
        App.state.priorityShortcodes   = Array.from(d3.union(data.map(d => d["Priority Alignment Shortcode"])));
        App.state.priorityDescriptions = Array.from(d3.union(data.map(d => d["Priority Alignment Description"])));

        //when given a specific strategy, get all of the jurisdictions that also have that strategy
        App.state.getJurisdictionsFromStrategy = buildJurisdictionsFromStrategy(data);

        // Build top-level buttons
        updatePills(App.state.priorityShortcodes, App.state.priorityDescriptions);

        //show all data in datatable
        renderPolicyTable();

        // Wire events after initial DOM exists
        wireEvents(jQuery);
      })
      .catch((err) => console.error("Error loading CSV:", err));
  });

})();
</script>
