
<div id="bar-chart"></div>
<script>
// ----- Horizontal Bar Chart (D3 v7) -----
// Expects a <div id="bar-chart"></div> in your HTML.
// Encapsulated to avoid conflicts with other charts on the page.


let barData = [
  { name: "Green Spaces",    color: "#F3F6FB", textColor: "#000000", value: 100 },
  { name: "Air Quality",     color: "#002C4B", textColor: "#ffffff", value: 70 },
  { name: "Infrastructure",  color: "#355679", textColor: "#ffffff", value: 50 },
  { name: "Agriculture",     color: "#94A6B4", textColor: "#000000", value: 30 }
];


(function () {
  // ---- Layout / sizing (responsive via viewBox) ----
  const margin = { top: 16, right: 14, bottom: 32, left: 16 };
  const vbWidth = 640;               // viewBox width
  const barHeight = 150;              // each bar's height
  const barGap = 20;                 // space between bars

  // Scales (defined once; ranges/domains set per render)
  const x = d3.scaleLinear();
  const y = d3.scaleBand().paddingInner(barGap / (barHeight + barGap));

  // SVG
  const svg = d3.select("#bar-chart")
    .append("svg")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("preserveAspectRatio", "xMidYMid meet")
    .attr("role", "img")
    .attr("aria-labelledby", "bar-title");

  svg.append("title").attr("id", "bar-title").text("Horizontal bar chart");

  const g = svg.append("g");               // main plotting group
  const gx = g.append("g").attr("class", "x-axis"); // x-axis group

  // Bars & labels containers
  const barsG = g.append("g").attr("class", "bars");
  const labelsG = g.append("g").attr("class", "labels");

  const key = d => d.name; // stable join key

  // ---- Initial render ----
  render(barData);

  // Expose updater
  window.updateBarChart = function (newData, duration = 800) {
    render(newData, duration);
  };

  function render(data, duration = 0) {
    const innerHeight = data.length * (barHeight + barGap) - barGap;
    const vbHeight = margin.top + innerHeight + margin.bottom;

    // Update viewBox each time in case row count changes
    svg.attr("viewBox", `0 0 ${vbWidth} ${vbHeight}`);

    // Plot area transform
    g.attr("transform", `translate(${margin.left},${margin.top})`);

    const innerWidth = vbWidth - margin.left - margin.right;

    // ---- Scales
    const maxVal = d3.max(data, d => +d.value) || 1;
    x.domain([0, maxVal]).range([0, innerWidth]).nice();
    y.domain(data.map(d => d.name)).range([0, innerHeight]);

    // ---- Bars
    const bars = barsG.selectAll("rect.bar")
      .data(data, key);

    const barsEnter = bars.enter().append("rect")
      .attr("class", "bar")
      .attr("rx", 4).attr("ry", 4)
      .attr("y", d => y(d.name))
      .attr("height", y.bandwidth())
      .attr("x", 0)
      .attr("width", 0) // animate in from 0
      .attr("fill", d => d.color);

    bars.merge(barsEnter)
      .transition().duration(duration)
      .attr("y", d => y(d.name))
      .attr("height", y.bandwidth())
      .attr("fill", d => d.color)
      .attr("width", d => x(+d.value));

    bars.exit()
      .transition().duration(duration)
      .attr("width", 0)
      .remove();

    // ---- Inside labels (names)
    const labels = labelsG.selectAll("text.label")
      .data(data, key);

    const labelsEnter = labels.enter().append("text")
      .attr("class", "label")
      .style("font", "40px Roboto, Helvetica, Arial, sans-serif")
      .attr("dominant-baseline", "middle")
      .attr("text-anchor", "start")
      .attr("x", 8) // slight padding from left edge of bar
      .attr("y", d => y(d.name) + y.bandwidth() / 2)
      .attr("fill", d => d.textColor)
      .text(d => d.name)
      .style("opacity", 0);

    labels.merge(labelsEnter)
      .transition().duration(duration)
      .attr("y", d => y(d.name) + y.bandwidth() / 2)
      .attr("fill", d => d.textColor)
      .attr("x", 8) // keep inside the bar; adjust if you prefer dynamic placement
      .style("opacity", 1);

    labels.exit()
      .transition().duration(duration)
      .style("opacity", 0)
      .remove();

    // ---- Axis (bottom numeric axis)
    gx.attr("transform", `translate(${margin.left},${margin.top + innerHeight})`);
    const axis = d3.axisBottom(x).ticks(5).tickSizeOuter(0);

    // Draw/transition axis
    const axisSel = svg.select(".x-axis");
    if (duration > 0) {
      axisSel.transition().duration(duration).call(axis);
    } else {
      axisSel.call(axis);
    }
  }
})();

</script>